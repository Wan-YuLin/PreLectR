// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// get_prevalence
arma::vec get_prevalence(const arma::mat& X);
RcppExport SEXP _PreLectR_get_prevalence(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(get_prevalence(X));
    return rcpp_result_gen;
END_RCPP
}
// initialize_M
arma::mat initialize_M(const arma::mat& X);
RcppExport SEXP _PreLectR_initialize_M(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(initialize_M(X));
    return rcpp_result_gen;
END_RCPP
}
// initialize_w
arma::vec initialize_w(const arma::mat& X);
RcppExport SEXP _PreLectR_initialize_w(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(initialize_w(X));
    return rcpp_result_gen;
END_RCPP
}
// initialize_pvl
arma::vec initialize_pvl(const arma::vec& pvlvec);
RcppExport SEXP _PreLectR_initialize_pvl(SEXP pvlvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type pvlvec(pvlvecSEXP);
    rcpp_result_gen = Rcpp::wrap(initialize_pvl(pvlvec));
    return rcpp_result_gen;
END_RCPP
}
// sigmoid
arma::vec sigmoid(const arma::vec& z);
RcppExport SEXP _PreLectR_sigmoid(SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(sigmoid(z));
    return rcpp_result_gen;
END_RCPP
}
// BCE
double BCE(const arma::vec& y_true, const arma::vec& y_pred, double epsilon);
RcppExport SEXP _PreLectR_BCE(SEXP y_trueSEXP, SEXP y_predSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y_true(y_trueSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y_pred(y_predSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(BCE(y_true, y_pred, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// logistic_gradient
arma::vec logistic_gradient(const arma::mat& X, const arma::vec& y, const arma::vec& w);
RcppExport SEXP _PreLectR_logistic_gradient(SEXP XSEXP, SEXP ySEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(logistic_gradient(X, y, w));
    return rcpp_result_gen;
END_RCPP
}
// proximal_GD_clr
List proximal_GD_clr(const arma::mat& X, const arma::vec& y, const arma::vec& w, const arma::vec& v, const arma::vec& pvl, const arma::vec& thres, double lr, double alpha, double epsilon);
RcppExport SEXP _PreLectR_proximal_GD_clr(SEXP XSEXP, SEXP ySEXP, SEXP wSEXP, SEXP vSEXP, SEXP pvlSEXP, SEXP thresSEXP, SEXP lrSEXP, SEXP alphaSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pvl(pvlSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type thres(thresSEXP);
    Rcpp::traits::input_parameter< double >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(proximal_GD_clr(X, y, w, v, pvl, thres, lr, alpha, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// prelect_clr
List prelect_clr(const arma::mat& X, const arma::vec& pvl, const arma::vec& y, double lmbd, int max_iter, double tol, double lr, double alpha, double epsilon, bool echo);
RcppExport SEXP _PreLectR_prelect_clr(SEXP XSEXP, SEXP pvlSEXP, SEXP ySEXP, SEXP lmbdSEXP, SEXP max_iterSEXP, SEXP tolSEXP, SEXP lrSEXP, SEXP alphaSEXP, SEXP epsilonSEXP, SEXP echoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pvl(pvlSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lmbd(lmbdSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< bool >::type echo(echoSEXP);
    rcpp_result_gen = Rcpp::wrap(prelect_clr(X, pvl, y, lmbd, max_iter, tol, lr, alpha, epsilon, echo));
    return rcpp_result_gen;
END_RCPP
}
// predict_proba
arma::vec predict_proba(const arma::mat& X, const arma::vec& w);
RcppExport SEXP _PreLectR_predict_proba(SEXP XSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_proba(X, w));
    return rcpp_result_gen;
END_RCPP
}
// MSE
double MSE(const arma::vec& y_true, const arma::vec& y_pred, double epsilon);
RcppExport SEXP _PreLectR_MSE(SEXP y_trueSEXP, SEXP y_predSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y_true(y_trueSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y_pred(y_predSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(MSE(y_true, y_pred, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// mse_gradient
arma::vec mse_gradient(const arma::mat& X, const arma::vec& y, const arma::vec& w);
RcppExport SEXP _PreLectR_mse_gradient(SEXP XSEXP, SEXP ySEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(mse_gradient(X, y, w));
    return rcpp_result_gen;
END_RCPP
}
// proximal_GD_reg
List proximal_GD_reg(const arma::mat& X, const arma::vec& y, const arma::vec& w, const arma::vec& v, const arma::vec& pvl, const arma::vec& thres, double lr, double alpha, double epsilon);
RcppExport SEXP _PreLectR_proximal_GD_reg(SEXP XSEXP, SEXP ySEXP, SEXP wSEXP, SEXP vSEXP, SEXP pvlSEXP, SEXP thresSEXP, SEXP lrSEXP, SEXP alphaSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pvl(pvlSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type thres(thresSEXP);
    Rcpp::traits::input_parameter< double >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(proximal_GD_reg(X, y, w, v, pvl, thres, lr, alpha, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// prelect_reg
List prelect_reg(const arma::mat& X, const arma::vec& pvl, const arma::vec& y, double lmbd, int max_iter, double tol, double lr, double alpha, double epsilon, bool echo);
RcppExport SEXP _PreLectR_prelect_reg(SEXP XSEXP, SEXP pvlSEXP, SEXP ySEXP, SEXP lmbdSEXP, SEXP max_iterSEXP, SEXP tolSEXP, SEXP lrSEXP, SEXP alphaSEXP, SEXP epsilonSEXP, SEXP echoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pvl(pvlSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lmbd(lmbdSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< bool >::type echo(echoSEXP);
    rcpp_result_gen = Rcpp::wrap(prelect_reg(X, pvl, y, lmbd, max_iter, tol, lr, alpha, epsilon, echo));
    return rcpp_result_gen;
END_RCPP
}
// R2
double R2(NumericVector y_true, NumericVector y_pred);
RcppExport SEXP _PreLectR_R2(SEXP y_trueSEXP, SEXP y_predSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y_true(y_trueSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_pred(y_predSEXP);
    rcpp_result_gen = Rcpp::wrap(R2(y_true, y_pred));
    return rcpp_result_gen;
END_RCPP
}
// initialize_M_multi
arma::mat initialize_M_multi(const arma::mat& X);
RcppExport SEXP _PreLectR_initialize_M_multi(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(initialize_M_multi(X));
    return rcpp_result_gen;
END_RCPP
}
// initialize_w_multi
arma::mat initialize_w_multi(const arma::mat& X, const int& n_class);
RcppExport SEXP _PreLectR_initialize_w_multi(SEXP XSEXP, SEXP n_classSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_class(n_classSEXP);
    rcpp_result_gen = Rcpp::wrap(initialize_w_multi(X, n_class));
    return rcpp_result_gen;
END_RCPP
}
// initialize_pvl_multi
arma::mat initialize_pvl_multi(const arma::mat& pvlmat);
RcppExport SEXP _PreLectR_initialize_pvl_multi(SEXP pvlmatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type pvlmat(pvlmatSEXP);
    rcpp_result_gen = Rcpp::wrap(initialize_pvl_multi(pvlmat));
    return rcpp_result_gen;
END_RCPP
}
// prelect_multi_clr
List prelect_multi_clr(const arma::mat& X, const arma::mat& pvl, const arma::mat& y, double lmbd, int max_iter, double tol, double lr, double alpha, double epsilon, bool echo);
RcppExport SEXP _PreLectR_prelect_multi_clr(SEXP XSEXP, SEXP pvlSEXP, SEXP ySEXP, SEXP lmbdSEXP, SEXP max_iterSEXP, SEXP tolSEXP, SEXP lrSEXP, SEXP alphaSEXP, SEXP epsilonSEXP, SEXP echoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type pvl(pvlSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lmbd(lmbdSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< bool >::type echo(echoSEXP);
    rcpp_result_gen = Rcpp::wrap(prelect_multi_clr(X, pvl, y, lmbd, max_iter, tol, lr, alpha, epsilon, echo));
    return rcpp_result_gen;
END_RCPP
}
// cox_loss
double cox_loss(const arma::mat& X, const arma::vec& w, const arma::vec& events);
RcppExport SEXP _PreLectR_cox_loss(SEXP XSEXP, SEXP wSEXP, SEXP eventsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type events(eventsSEXP);
    rcpp_result_gen = Rcpp::wrap(cox_loss(X, w, events));
    return rcpp_result_gen;
END_RCPP
}
// cox_gradient
arma::vec cox_gradient(const arma::mat& X, const arma::vec& w, const arma::vec& events);
RcppExport SEXP _PreLectR_cox_gradient(SEXP XSEXP, SEXP wSEXP, SEXP eventsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type events(eventsSEXP);
    rcpp_result_gen = Rcpp::wrap(cox_gradient(X, w, events));
    return rcpp_result_gen;
END_RCPP
}
// proximal_GD_cox
List proximal_GD_cox(const arma::mat& X, const arma::vec& events, arma::vec w, arma::vec v, const arma::vec& pvl, const arma::vec& thres, double lr, double alpha, double epsilon);
RcppExport SEXP _PreLectR_proximal_GD_cox(SEXP XSEXP, SEXP eventsSEXP, SEXP wSEXP, SEXP vSEXP, SEXP pvlSEXP, SEXP thresSEXP, SEXP lrSEXP, SEXP alphaSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type events(eventsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type w(wSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pvl(pvlSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type thres(thresSEXP);
    Rcpp::traits::input_parameter< double >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(proximal_GD_cox(X, events, w, v, pvl, thres, lr, alpha, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// prelect_cox
List prelect_cox(const arma::mat& X, const arma::vec& pvl, const arma::vec& events, double lmbd, int max_iter, double tol, double lr, double alpha, double epsilon, bool echo);
RcppExport SEXP _PreLectR_prelect_cox(SEXP XSEXP, SEXP pvlSEXP, SEXP eventsSEXP, SEXP lmbdSEXP, SEXP max_iterSEXP, SEXP tolSEXP, SEXP lrSEXP, SEXP alphaSEXP, SEXP epsilonSEXP, SEXP echoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pvl(pvlSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type events(eventsSEXP);
    Rcpp::traits::input_parameter< double >::type lmbd(lmbdSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< bool >::type echo(echoSEXP);
    rcpp_result_gen = Rcpp::wrap(prelect_cox(X, pvl, events, lmbd, max_iter, tol, lr, alpha, epsilon, echo));
    return rcpp_result_gen;
END_RCPP
}
// concordance_index
double concordance_index(NumericVector time, NumericVector status, NumericVector risk);
RcppExport SEXP _PreLectR_concordance_index(SEXP timeSEXP, SEXP statusSEXP, SEXP riskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type time(timeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type status(statusSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type risk(riskSEXP);
    rcpp_result_gen = Rcpp::wrap(concordance_index(time, status, risk));
    return rcpp_result_gen;
END_RCPP
}
// map_ko_to_taxon
List map_ko_to_taxon(DataFrame KOindex);
RcppExport SEXP _PreLectR_map_ko_to_taxon(SEXP KOindexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type KOindex(KOindexSEXP);
    rcpp_result_gen = Rcpp::wrap(map_ko_to_taxon(KOindex));
    return rcpp_result_gen;
END_RCPP
}
// GSEA_run
double GSEA_run(NumericVector hit_loci, int refer_length);
RcppExport SEXP _PreLectR_GSEA_run(SEXP hit_lociSEXP, SEXP refer_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type hit_loci(hit_lociSEXP);
    Rcpp::traits::input_parameter< int >::type refer_length(refer_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(GSEA_run(hit_loci, refer_length));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_PreLectR_get_prevalence", (DL_FUNC) &_PreLectR_get_prevalence, 1},
    {"_PreLectR_initialize_M", (DL_FUNC) &_PreLectR_initialize_M, 1},
    {"_PreLectR_initialize_w", (DL_FUNC) &_PreLectR_initialize_w, 1},
    {"_PreLectR_initialize_pvl", (DL_FUNC) &_PreLectR_initialize_pvl, 1},
    {"_PreLectR_sigmoid", (DL_FUNC) &_PreLectR_sigmoid, 1},
    {"_PreLectR_BCE", (DL_FUNC) &_PreLectR_BCE, 3},
    {"_PreLectR_logistic_gradient", (DL_FUNC) &_PreLectR_logistic_gradient, 3},
    {"_PreLectR_proximal_GD_clr", (DL_FUNC) &_PreLectR_proximal_GD_clr, 9},
    {"_PreLectR_prelect_clr", (DL_FUNC) &_PreLectR_prelect_clr, 10},
    {"_PreLectR_predict_proba", (DL_FUNC) &_PreLectR_predict_proba, 2},
    {"_PreLectR_MSE", (DL_FUNC) &_PreLectR_MSE, 3},
    {"_PreLectR_mse_gradient", (DL_FUNC) &_PreLectR_mse_gradient, 3},
    {"_PreLectR_proximal_GD_reg", (DL_FUNC) &_PreLectR_proximal_GD_reg, 9},
    {"_PreLectR_prelect_reg", (DL_FUNC) &_PreLectR_prelect_reg, 10},
    {"_PreLectR_R2", (DL_FUNC) &_PreLectR_R2, 2},
    {"_PreLectR_initialize_M_multi", (DL_FUNC) &_PreLectR_initialize_M_multi, 1},
    {"_PreLectR_initialize_w_multi", (DL_FUNC) &_PreLectR_initialize_w_multi, 2},
    {"_PreLectR_initialize_pvl_multi", (DL_FUNC) &_PreLectR_initialize_pvl_multi, 1},
    {"_PreLectR_prelect_multi_clr", (DL_FUNC) &_PreLectR_prelect_multi_clr, 10},
    {"_PreLectR_cox_loss", (DL_FUNC) &_PreLectR_cox_loss, 3},
    {"_PreLectR_cox_gradient", (DL_FUNC) &_PreLectR_cox_gradient, 3},
    {"_PreLectR_proximal_GD_cox", (DL_FUNC) &_PreLectR_proximal_GD_cox, 9},
    {"_PreLectR_prelect_cox", (DL_FUNC) &_PreLectR_prelect_cox, 10},
    {"_PreLectR_concordance_index", (DL_FUNC) &_PreLectR_concordance_index, 3},
    {"_PreLectR_map_ko_to_taxon", (DL_FUNC) &_PreLectR_map_ko_to_taxon, 1},
    {"_PreLectR_GSEA_run", (DL_FUNC) &_PreLectR_GSEA_run, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_PreLectR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
