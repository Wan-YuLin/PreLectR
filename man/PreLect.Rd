% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Main.R
\name{PreLect}
\alias{PreLect}
\title{PreLect}
\usage{
PreLect(
  X,
  pvl,
  Y,
  lambda,
  task = "classification",
  max_iter = 10000,
  tol = 1e-04,
  lr = 0.001,
  alpha = 0.9,
  epsilon = 1e-08,
  run_echo = FALSE
)
}
\arguments{
\item{X}{Matrix or DataFrame. Scaled data with samples as rows and features as columns, used for machine learning. If no scaled data is provided, raw count data may be used.}

\item{pvl}{Numeric vector. The prevalence of each feature, generated by `GetPrevalence`.}

\item{Y}{Character or numeric vector. Labels for the data.}

\item{lambda}{Numeric. Lambda value, the intensity of regularization. Strongly suggested to be determined by the `LambdaTuning` process.}

\item{task}{String. Specifies the type of task: either `classification` or `regression` (default is `classification`).}

\item{max_iter}{Integer. Maximum number of iterations taken for the solvers to converge (default is 10000).}

\item{tol}{Numeric. Tolerance for stopping criteria (default is 1e-4).}

\item{lr}{Numeric. Learning rate in RMSprop optimizer (default is 0.001).}

\item{alpha}{Numeric. Smoothing constant in RMSprop optimizer (default is 0.9).}

\item{epsilon}{Numeric. Small constant added to the denominator to improve numerical stability (default is 1e-8).}

\item{run_echo}{Logical. If TRUE, prints the training result for each lambda being tested (default is FALSE).}
}
\value{
A list containing:
- `coef_table`: A data frame containing the estimated coefficients for each feature.
- `loss_value`: Final loss value achieved during training.
- `convergence`: Difference between the final and penultimate iterations, indicating convergence level.
}
\description{
PreLect algorithms, integrating L1 regularization with an inverted prevalence penalty, to select universal feature.
}
\examples{
set.seed(42)
n_samples <- 10
n_features <- 100

X_raw <- matrix(rnbinom(n_features * n_samples, size = 10, mu = 1), nrow = n_features, ncol = n_samples)
rownames(X_raw) <- paste0('feat',1:n_features)
X_scaled <- t(scale(t(X_raw)))  # feature-wise z-standardization
diagnosis <- c('CRC','CRC','health','CRC','health','CRC','health','health','CRC','CRC')
diagnosis <- factor(diagnosis, levels=c('health', 'CRC')) # assign 'health' as control sample
pvlvec <- GetPrevalence(X_raw)

result <- PreLect(X_scaled, pvlvec, diagnosis, lambda=1e-4, task="classification")

}
